# For a quick start check out our HTTP Requests collection (Tools|HTTP Client|Open HTTP Requests Collection) or
# paste cURL into the file and request will be converted to HTTP Request format.
#
# Following HTTP Request Live Templates are available:
# * 'gtrp' and 'gtr' create a GET request with or without query parameters;
# * 'ptr' and 'ptrp' create a POST request with a simple or parameter-like body;
# * 'mptr' and 'fptr' create a POST request to submit a form with a text or file field (multipart/form-data);

Method Request-URI HTTP-Version
Header-field: Header-value

###

# curl http://localhost:8080/topjava/rest/meals
GET http://localhost:8080/topjava/rest/meals

> {% client.test("Response executed successfully", function() {
    client.assert(response.status === 200, "Response status is not 200");
    client.assert(response.contentType.mimeType === "application/json", "ContentType is not application/json");
    });
  %}

###

# curl http://localhost:8080/topjava/rest/meals/100001
GET http://localhost:8080/topjava/rest/meals/100008

> {% client.test("Response executed successfully", function() {
    client.assert(response.status === 200, "Response status is not 200");
    client.assert(response.contentType.mimeType === "application/json", "ContentType is not application/json");
    });
  %}

###

# curl -X DELETE http://localhost:8080/topjava/rest/meals/100007
DELETE http://localhost:8080/topjava/rest/meals/100007

> {% client.test("Response executed successfully", function() {
    client.assert(response.status === 204, "Response status is not 204");
    client.assert(response.body.length === 0, "Response body is not empty");
    });
  %}

###

# curl -H "Content-Type: application/json" -X POST -d '{\"dateTime\":\"2019-11-24T20:28:00\", \"description\":\"Dinner\", \"calories\":\"510\"}' http://localhost:8080/topjava/rest/meals
POST http://localhost:8080/topjava/rest/meals
Content-Type: application/json

{"dateTime":"2019-11-24T20:32:00", "description":"Dinner", "calories":"510"}

> {% client.test("Response executed successfully", function() {
    client.assert(response.status === 201, "Response status is not 201");
    client.assert(response.contentType.mimeType === "application/json", "ContentType is not application/json");
    });
  %}

###

# curl -H "Content-Type: application/json" -X PUT -d '{\"dateTime\":\"2019-11-24T20:15:00\", \"description\":\"Dinner\", \"calories\":\"510\"}' http://localhost:8080/topjava/rest/meals/100005
PUT http://localhost:8080/topjava/rest/meals/100005
Content-Type: application/json

{"dateTime":"2019-11-24T20:15:00", "description":"Dinner", "calories":"510"}

> {% client.test("Response executed successfully", function() {
    client.assert(response.status === 204, "Response status is not 204");
    client.assert(response.body.length === 0, "Response body is not empty");
    });
  %}

###

# curl http://localhost:8080/topjava/rest/meals/filter?startDateTime=2015-05-31T09:11:00&endDateTime=2015-05-31T15:15:00
GET http://localhost:8080/topjava/rest/meals/filter?startDateTime=2015-05-30T09:11:00&endDateTime=2015-05-31T15:15:00

> {% client.test("Response executed successfully", function() {
    client.assert(response.status === 200, "Response status is not 200");
    client.assert(response.contentType.mimeType === "application/json", "ContentType is not application/json");
    });
  %}

###


